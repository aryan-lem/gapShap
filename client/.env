VITE_API_URL=http://localhost:8080

# Application Flow: Frontend to Backend Integration
# Based on your configuration, here's how the authentication flow will work between your React frontend and Spring Boot backend:

# 1. Initial Application Load
# User opens React frontend (localhost:3000)
# AuthProvider in AuthContext.tsx initializes and makes a request to ${API_URL}/dashboard
# Uses the API URL from environment variable (defaults to http://localhost:8080)
# Includes credentials to send cookies
# Spring Boot backend checks if user has a valid session
# If not authenticated, returns 401 status
# If authenticated, returns user data
# React shows appropriate UI based on authentication status
# 2. Login Flow
# User clicks "Sign in" on frontend
# AuthContext redirects to /oauth2/authorization/auth0 (handled by Spring Security)
# Spring Security redirects to Auth0 login page
# User authenticates with Auth0
# Auth0 redirects back to your backend (http://localhost:8080/login/oauth2/code/auth0)
# Spring Security processes OAuth2 callback:
# Validates the token
# Creates a session
# Sets JSESSIONID cookie
# Backend redirects user back to frontend
# React detects authentication and displays Dashboard
# 3. User Data Flow
# Backend's UserController.dashboard() endpoint:
# Extracts user info from Auth0 token
# Saves/updates user in database
# Returns user data (id, name, email) to frontend
# React's Dashboard component displays this user information
# 4. Logout Flow
# User clicks "Logout" in React UI
# Frontend calls /api/logout endpoint (as configured in SecurityConfig.java)
# Spring Security:
# Invalidates session
# Clears authentication
# Deletes JSESSIONID cookie
# Frontend redirects to Auth0 logout URL (configured in application.yml)
# Includes returnTo parameter pointing to frontend
# Auth0 completes logout and redirects user back to frontend
# 5. Cross-Origin Communication
# CORS is properly configured to allow frontend-to-backend communication
# Cookie settings (same-site: none, secure: true) enable authentication cookies to work across domains
# All API requests include credentials to send cookies
# 6. Security Considerations
# Frontend routes are protected with ProtectedRoute component
# Backend endpoints (except "/" and "/public/**") require authentication
# CSRF is disabled (make sure to enable in production)
# HTTP-only flag is disabled for development (enable in production)
# This setup creates a complete authentication flow between your React frontend and Spring Boot backend using Auth0 as the identity provider.